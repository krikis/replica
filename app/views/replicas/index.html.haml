
:coffeescript
  $(document).ready ->
    debug = (string) ->
      paragraph = $("<p>\#{string}<\p>")
      paragraph.appendTo("#debug")
      $("#debug").scrollTo(paragraph, 50)
    window.debug = debug

    # set initial reconnection timeout to 2 seconds
    window.prev_reconnect_on = 1
    window.reconnect_on = 2
    initSocket = ->
      Socket = (if "MozWebSocket" of window then MozWebSocket else WebSocket)
      localStorage._id = "#{session[:key]}"
      localStorage._index = JSON.stringify []
      web_socket = new Socket("ws://localhost:8080/")
      window.web_socket = web_socket

      web_socket.onopen = ->
        # reset reconnection timeouts
        window.prev_reconnect_on = 1
        window.reconnect_on = 2
        debug "connected..."
        web_socket.send JSON.stringify(
          id: localStorage._id
          subscribe: true
        )

      web_socket.onmessage = (evt) ->
        # fetch data from localstorage
        id = localStorage._id
        index = JSON.parse(localStorage._index)
        data = JSON.parse(evt.data)
        if data.index? # set the initial index
          data.index[data.index.length] = id unless id in data.index
          index = data.index
        else if data.subscribe? and data.id != id # handle subscription
          index[index.length] = data.id
        else if data.unsubscribe and data.id != id # handle unsubscription
          index.delete data.id
        else
          document.store_data(data)
          return
        # finally 
        # save index updates to localstorage
        localStorage._index = JSON.stringify(index)
        # debug evt.data
        # debug localStorage._index

      web_socket.onclose = ->
        localStorage._index = JSON.stringify []
        debug "socket closed"
        debug localStorage._index
        debug "reconnecting in \#{window.reconnect_on} seconds..."
        setTimeout (->
          initSocket()
        ), window.reconnect_on * 1000
        # increase the timeout fibonacciwise in order to decrease the network load
        tmp = window.reconnect_on
        window.reconnect_on = window.reconnect_on + window.prev_reconnect_on
        window.prev_reconnect_on = tmp

    @store_data = (data) ->
      # check the checksum
      if data.crc? and crc32("\#{data.key}|\#{data.value}") == data.crc
        {key, value} = data
        debug "\#{key}: \#{value}"
      else if data.crc?
        debug "Checksum Error"

    @show_data = ->
      keys = (name for name of localStorage when name[0] != '_')

    if Modernizr.localstorage and Modernizr.websockets
      initSocket()

#button Start
#data
#debug

:coffeescript
  $(document).ready ->
    if Modernizr.localstorage and Modernizr.websockets
      $("#button").click ->
        web_socket = window.web_socket
        # fetch data from localstorage
        id = localStorage._id
        index = JSON.parse localStorage._index
        # generate data for localstorage
        number = Math.floor(Math.random() * 20).toString()
        number = "0" + number until number.length == 2
        key = "key_" + Math.floor(Math.random() * 20).toString()
        value = window.random_color()
        web_socket.send JSON.stringify(
          id: id
          key: key
          value: value
          crc: crc32("\#{key}|\#{value}") # crc checksum
        )