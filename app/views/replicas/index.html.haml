
:coffeescript
  $ -> # jQuery document.ready
    debug = (string, color="black", json=true) ->
      string = JSON.stringify string unless typeof string == "string"
      string = string.replace(/,/g, ', ').replace(/":/g, '": ') if json
      paragraph = $("<p>\#{string}<\p>")
      paragraph.appendTo("#debug")
      paragraph.css("color", color)
      $("#debug").scrollTo(paragraph) unless window.stop_scroll_debug?
    window.debug = debug

    # set initial reconnection timeout to 2 seconds
    window.prev_reconnect_on = 1
    window.reconnect_on = 2
    @init_socket = ->
      # TODO: preinitialize #data with localStorage data
      # TODO: preinitialize #queue with localStorage queue
      # cross-browser compatibility
      Socket = if "MozWebSocket" of window then MozWebSocket else WebSocket
      # set time window for sending nacks
      window.nack_window = 10000
      # initialize local storage system variables
      localStorage._id = "#{session[:key]}"               # unique identifier for the client
      localStorage._index = JSON.stringify []             # network membership index (for debuggin only)
      localStorage._vector ?= JSON.stringify {}           # local time vector for gossip
      localStorage._send_queue ?= JSON.stringify []       # queue with all messages sent by client
      localStorage._holdback_queue ?= JSON.stringify []   # holdback queue for gossip
      localStorage._high_ends ?= JSON.stringify {}        # highest missing message timestamps for nack handling
      localStorage._nack_index ?= JSON.stringify {}       # index of recently sent nacks
      localStorage._conflict_cache ?= JSON.stringify {}   # cache for conflict resolution
      localStorage._conflict_index ?= JSON.stringify {}   # index for recently resolved conflicts
      localStorage._offline_queue ?= JSON.stringify []    # queue for offline generated messages
      localStorage._offline_data ?= JSON.stringify {}     # current state of the offline data
      # open a web socket connection
      web_socket = new Socket("ws://y.odel.it:8080/")
      window.web_socket = web_socket

      # upon opening a connection with the web socket server
      web_socket.onopen = ->
        # reset reconnection timeouts
        window.prev_reconnect_on = 1
        window.reconnect_on = 2
        # update the view
        $("#offbutton").html("Offline")
                       .removeClass("online")
                       .addClass("offline")
        # debug "connected..."
        # multicast a message with the clients time-vector
        window.web_socket.send JSON.stringify
          id: localStorage._id
          vector: JSON.parse localStorage._vector
          subscribe: true
        # register the time of subscribing to the multicast network
        window.subscription_sent = new Date().getTime()
      
      # upon recieving a message from the web socket server
      web_socket.onmessage = (evt) ->
        # debug evt.data, "Gainsboro"
        # set variables from localstorage
        id = localStorage._id
        index = JSON.parse localStorage._index
        data = JSON.parse evt.data
        if data.index?                                    # set the initial index (for debuggin only)
          data.index[data.index.length] = id unless id in data.index
          index = data.index
          # save index updates to localstorage
          localStorage._index = JSON.stringify(index)
        else if data.subscribe? and data.id != id         # handle subscription (for debuggin only)
          # save index updates to localstorage
          index.push data.id
          localStorage._index = JSON.stringify(index)
          # resend all data the new node is missing or send empty array
          vector = JSON.parse localStorage._vector
          data.vector[id] ?= -1
          data.start = data.vector[id] + 1
          data.end = vector[id]
          document.send_retry data
        else if data.unsubscribe? and data.id != id       # handle unsubscription (for debuggin only)
          index.delete data.id
          # save index updates to localstorage
          localStorage._index = JSON.stringify(index)
        else if data.disable_clear?                       # disable clear data button
          $(".clear").addClass("disabled")
        else if data.clear?                               # clear all data in the local stora and reset system variables
          document.clear_data()
        else if data.arresto_momentum?
          document.interrupt()
        else if data.nack?                                # handle multicast nack
          # debug evt.data
          document.send_retry data
        else if data.retry?                               # consume multicast retry
          # debug evt.data
          document.consume_retry data
        else if data.conflict?                            # consume a conflict message
          document.resolve_conflict data
        else if data.id != id                             # consume data message
          document.handle_data data
        # debug localStorage._index, "Gainsboro"
        
      # when the web-socket connection is closed
      web_socket.onclose = ->
        # clear peer-to-peer network state (for debuggin only)
        localStorage._index = JSON.stringify []
        # update the view
        $("#offbutton").html("Reconnect")
                       .removeClass("offline")
                       .addClass("online")
        # debug "socket closed"
        # debug localStorage._index, "Gainsboro"
        unless window.offline?
          debug "reconnecting in \#{window.reconnect_on} seconds...", "Gainsboro"
          setTimeout ->
            document.init_socket()
          , window.reconnect_on * 1000
          # increase the timeout fibonacciwise in order to decrease the network load
          tmp = window.reconnect_on
          window.reconnect_on = window.reconnect_on + window.prev_reconnect_on
          window.prev_reconnect_on = tmp

    @handle_data = (data) ->
      # set local variables
      {key, value, old_value} = data
      local_old_value = localStorage[key]
      local_old_value ?= "#ffffff"
      unless localStorage._id == data.id
        vector = JSON.parse localStorage._vector
        vector[id] ?= -1 for id of data.vector
        localStorage._vector = JSON.stringify vector
        # debug "\#{data.id} => \#{JSON.stringify data.vector} || \#{JSON.stringify vector}"
        # The message was already delivered
        if vector[data.id] >= data.vector[data.id]
          debug "Old message: \#{JSON.stringify data.vector}", "Crimson"
          return true # the data was skipped

        # There are messages missing
        if (missing_id = @missing_id_for data)?
          high_ends = JSON.parse localStorage._high_ends
          debug "Missing messages [\#{vector[missing_id] + 1}..\#{high_ends[missing_id]}] from \#{missing_id}!", "Crimson"
          @enqueue data
          holdback_queue = JSON.parse localStorage._holdback_queue
          unless holdback_queue.empty() or
                 (@missing_id_for holdback_queue[0])?
            debug "Consuming it from the queue...", "CornFlowerBlue"
            # the missing element is on the queue
            @consume_retry
              id: missing_id
              retry: []
          else # consider sending a nack
            @handle_missing missing_id,             # missing id
                            vector[missing_id] + 1, # start
                            high_ends[missing_id]   # end
          return false # the data was qeued
        # The received data is corrupt
        if data.crc? and crc32("\#{data.key}|\#{data.value}") != data.crc
          debug "Checksum Error!", "Crimson"
          return true # TODO: handle this with a nack
        # update the vector
        vector[data.id] = data.vector[data.id]
        localStorage._vector = JSON.stringify vector

      # Visualize the data (to be) stored
      @visualize_data_flow "\#{data.id}_\#{data.vector[data.id]}", # id
                           "#data",                                # container
                           key,                                    # column
                           value,                                  # top_color
                           old_value,                              # bottom_color
                           false,                                  # scroll
                           data.resolution,                        # conflict resolution
                           data.resolved                           # resolved conflict
      # Conflict handling
      unless data.resolved? # is this an old conflict that was already resolved?
        if old_value != local_old_value
          @handle_conflict data
        else
          @save_data data

      # color = "Gainsboro"
      # if local_old_value != old_value
      #   color = "Crimson"
      # debug "\#{key}: \#{old_value} -> \#{value}", color
      return true # the data was consumed

    @save_data = (data) ->
      # Actually store the data
      localStorage[data.key] = data.value
      # Store the data for conflict resolution
      conflict_cache = JSON.parse localStorage._conflict_cache
      conflict_cache[data.key] = data
      localStorage._conflict_cache = JSON.stringify conflict_cache

    # send conflict message to losing client
    @handle_conflict = (data) ->
      # get the sender index
      conflict_cache = JSON.parse localStorage._conflict_cache
      previous = conflict_cache[data.key]
      # determine the winner of concurrent messages based on their unique id (cfr. Lamport's bakery algorithm)
      [loser, loser_vector, winner, winner_vector] = if data.id > previous.id or data.offline?   # new message is loser
        [data.id, data.vector, previous, previous.vector]
      else                                                                               # old message is loser
        # save the data
        @save_data data
        [previous.id, previous.vector, data, data.vector]
      $("#\#{loser}_\#{loser_vector[loser]}").children("div").css("border", "3px solid Crimson")
      conflict =
        id: localStorage._id
        dest: loser                                   # losing client
        loser_time: loser_vector[loser]               # message count of losing client
        winner: winner                                # winning client
        winner_time: winner_vector[winner]            # message count of winning client
        object: data.key                              # object subject to the conflict
        conflict: true
      unless loser == localStorage._id                # someone else has to resolve this
        # send conflict message to loser
        debug "Conflict! Sending message to \#{loser} for \#{data.key} (\#{loser_vector[loser]})", "Crimson"
        window.web_socket.send JSON.stringify conflict
      else                                            # I can resolve this myself
        @resolve_conflict conflict

    # resolve conflicting message by rebasing it on an object's current state
    @resolve_conflict = (data) ->
      conflict_index = JSON.parse localStorage._conflict_index
      # is the conflict being handled already?
      unless (conflicts = conflict_index[data.object])? and data.vector[localStorage._id] in conflicts
        index_of_conflict = data.loser_time
        # mark the conflict as being handled
        conflict_index[data.object] ?= []
        conflict_index[data.object].push index_of_conflict
        localStorage._conflict_index = JSON.stringify conflict_index
        # fetch conflicting message's data and mark it as resolved
        send_queue = JSON.parse localStorage._send_queue
        conflicting_message = send_queue[index_of_conflict]
        send_queue[index_of_conflict].resolved = true
        localStorage._send_queue = JSON.stringify send_queue
        # check whether current object state is up to date
        vector = JSON.parse localStorage._vector
        if vector[data.winner] <= data.winner_time
          # resend conflicting data update as a patch to the current storage state
          debug "Resolving conflict for \#{data.object} (\#{data.vector[localStorage._id]}) reported by \#{data.id}", "YellowGreen"
          @construe_data(conflicting_message.key, conflicting_message.value, true)
        else
          # TODO:: enqueue and send nack for when the winner message is not yet delivered
          @construe_data(conflicting_message.key, conflicting_message.value, true)

    # Detect missing messages
    @missing_id_for = (data) ->
      vector = JSON.parse localStorage._vector       # local time vector
      high_ends = JSON.parse localStorage._high_ends # highest missing message timestamps
      # missing messages of the sender itself
      missing_id = data.id if vector[data.id] + 1 < data.vector[data.id] and
                              (high_ends[data.id] >= data.vector[data.id] - 1 or
                               (high_ends[data.id] = data.vector[data.id] - 1)?)
      # missing messages of other clients
      missing_ids = (id for id of data.vector when id != data.id and
                                                   vector[id] < data.vector[id] and
                                                   (high_ends[id] >= data.vector[id] or
                                                    (high_ends[id] = data.vector[id])?))
      missing_id ?= missing_ids[0]
      localStorage._high_ends = JSON.stringify high_ends
      missing_id

    # put a message in the holdback queue until it can be delivered
    @enqueue = (data) ->
      holdback_queue = JSON.parse localStorage._holdback_queue
      holdback_queue.push data
      holdback_queue.sort @by_vector
      localStorage._holdback_queue = JSON.stringify holdback_queue
      {key, value, old_value} = data
      @visualize_data_flow "\#{data.id}_\#{data.vector[data.id]}", # id
                           "#queue",                               # container
                           key,                                    # column
                           value,                                  # top_color
                           old_value,                              # bottom_color
                           true                                    # scroll

    # sort data by time vector
    @by_vector = (first, last) ->
      do (first, last) -> # nesting to keep variables within the scope
        # initialize values for all client ids, should they not be present
        first_keys = (count for count of first.vector).sort()
        last_keys = (count for count of last.vector).sort()
        first.vector[key] ?= -1 for key in last_keys
        last.vector[key] ?= -1 for key in first_keys
        bigger = []
        smaller = []
        # count the number of positive and negative differences
        for key in first_keys
          bigger.push key if first.vector[key] > last.vector[key]
          smaller.push key if first.vector[key] < last.vector[key]
        # return the order
        return 1 if bigger.length > 0 and smaller.empty()
        return -1 if bigger.empty() and smaller.length > 0
        return 0

    # send nack for missing messages or wait for previously sent nack
    @handle_missing = (id, start, end) ->
      nack_index = JSON.parse localStorage._nack_index
      now = new Date().getTime()
      if (not nack_index[id]? or                               # no nack sent yet
          nack_index[id].end < end or                          # previous nack doesn't include all messages
          now - nack_index[id].time > window.nack_window) and  # nack timeout
         (not window.subscription_sent? or                     # not subscribed to peers yet (this shouldn't be the case)
          now - window.subscription_sent > window.nack_window) # subscription timeout

        # only request the messages that are not requested yet
        start = nack_index[id].end + 1 if nack_index[id]? and
                                          now - nack_index[id].time <= window.nack_window
        nack_index[id] =
          start: start
          end: end
          time: new Date().getTime()
        localStorage._nack_index = JSON.stringify nack_index
        nack =
          id: localStorage._id  # unique sender id
          dest: id              # message destination
          start: start          # timestamp of first missing message
          end: end              # timestamp of last missing message
          nack: true            # message type
        debug "Acquiring missing messages [\#{start}..\#{end}] for \#{id}", "CornflowerBlue"
        window.web_socket.send JSON.stringify nack
      else
        debug "Waiting for it...", "CornflowerBlue"

    # visualize delivering or enqueueing messages
    @visualize_data_flow = (id, container, column, top_color, bottom_color, scroll=false, resolution=false, resolved=false) ->
      $("<div id='\#{column}' class='color_column'>").appendTo("\#{container}") if $("\#{container} > #\#{column}").length == 0
      color_box = $("<div id='\#{id}' class='color_box' title='\#{id}'><div>")
      unless scroll
        color_box.prependTo("\#{container} > #\#{column}")
      else
        color_box.insertAfter("\#{container} > #\#{column} > .color_stub")
      color_box.children("div").css("border", "3px solid CornFlowerBlue") if resolution
      color_box.children("div").css("border", "3px solid Black") if resolved
      color_box.css("background", "-webkit-gradient(linear, left top, left bottom, from(\#{top_color}), to(\#{bottom_color}))")
      $("\#{container} > #\#{column}").scrollTo(".color_box:last-child") if scroll

    # resend messages requested by nack
    @send_retry = (data) ->
      # load all sent messages
      send_queue = JSON.parse localStorage._send_queue
      {start, end} = data
      $("#data #\#{localStorage._id}_\#{number}").children("div").css("border", "3px solid green") for number in [start..end]
      # resend the requested messages
      window.web_socket.send JSON.stringify
        id: localStorage._id            # unique sender id
        dest: data.id                   # message destination
        retry: send_queue[start..end]   # missing messages

    # consume resent messages
    @consume_retry = (data) ->
      # put messages on the holdback queue, if any 
      for data_part in data.retry
        @enqueue data_part if data_part
      nack_index = JSON.parse localStorage._nack_index
      delete nack_index[data.id]
      localStorage._nack_index = JSON.stringify nack_index
      # process queued values
      process_result = true
      # debug "Consuming queue", "CornflowerBlue"
      while process_result
        # pop message from the holdback queue
        holdback_queue = JSON.parse localStorage._holdback_queue
        break if holdback_queue.empty()
        data_part = holdback_queue.shift()
        localStorage._holdback_queue = JSON.stringify holdback_queue
        # try to process the data
        process_result = @handle_data data_part
        $("#queue #\#{data_part.id}_\#{data_part.vector[data_part.id]}").remove()
      holdback_queue = JSON.parse localStorage._holdback_queue
      if holdback_queue.empty() and process_result
        setTimeout -> # wait for all retry messages to arrive
          document.consume_offline_queue() # consume the offline queue
        , window.nack_window
        debug "Resuming normal operation", "CornflowerBlue" unless data.retry.empty()

    @consume_offline_queue = ->
      unless window.offline?
        offline_queue = JSON.parse localStorage._offline_queue
        localStorage._offline_queue = JSON.stringify []
        localStorage._offline_data = JSON.stringify {}
        debug "Consuming offline queue...", "CornFlowerBlue" unless offline_queue.empty()
        for data_part in offline_queue
          # rebase offline data
          @construe_data(data_part.key, data_part.value)
          $("#offline_queue #offline_\#{offline_queue.indexOf data_part}").remove()

    @interrupt = ->
      window.interval_id ?= -1
      window.clearInterval window.interval_id
      delete window.interval_id
      $("#startbutton").html("Start")
                       .removeClass("stop")
                       .addClass("start")
      $("#speedbutton").html("Faster")
                       .hide()
      $(".clear").removeClass("disabled")
                 .show()

    @clear_data = ->
      for key of localStorage when key[0] != '_'
        localStorage.removeItem key
      localStorage._vector = JSON.stringify {}
      localStorage._send_queue = JSON.stringify []
      localStorage._holdback_queue = JSON.stringify []
      localStorage._high_ends = JSON.stringify {}
      localStorage._nack_index = JSON.stringify {}
      localStorage._conflict_cache = JSON.stringify {}
      localStorage._conflict_index = JSON.stringify {}
      localStorage._offline_queue = JSON.stringify []
      localStorage._offline_data = JSON.stringify {}
      $("#offline_queue > .color_column").html("<div class='color_stub'>")
      $("#queue > .color_column").html("<div class='color_stub'>")
      $("#data > .color_column").html("<div class='color_stub'>")
      $("#debug").html("")

    # check whether web sockets and local storage are available in this browser
    if Modernizr.websockets and Modernizr.localstorage
      @init_socket()                              # initialize a web socket
      debug "It's HTML5 son. It's on."

#startbutton.button.start Start
#speedbutton.button.speed Faster
#clearbutton.button.clear Clear
#offbutton.button.offline Offline
#logbutton.button.log Hide Log
#arresto.button.arresto Arresto Momentum

%div.container
  #offline_queue
    #key_01.color_column
      %div.color_stub
    #key_02.color_column
      %div.color_stub
    #key_03.color_column
      %div.color_stub
    #key_04.color_column
      %div.color_stub
    #key_05.color_column
      %div.color_stub
    #key_06.color_column
      %div.color_stub
    #key_07.color_column
      %div.color_stub
    #key_08.color_column
      %div.color_stub
    #key_09.color_column
      %div.color_stub
    #key_10.color_column
      %div.color_stub
    #key_11.color_column
      %div.color_stub
    #key_12.color_column
      %div.color_stub
    #key_13.color_column
      %div.color_stub
    #key_14.color_column
      %div.color_stub
    #key_15.color_column
      %div.color_stub
    #key_16.color_column
      %div.color_stub
    #key_17.color_column
      %div.color_stub
    #key_18.color_column
      %div.color_stub
    #key_19.color_column
      %div.color_stub
    #key_20.color_column
      %div.color_stub
%div.container
  #queue
    #key_01.color_column
      %div.color_stub
    #key_02.color_column
      %div.color_stub
    #key_03.color_column
      %div.color_stub
    #key_04.color_column
      %div.color_stub
    #key_05.color_column
      %div.color_stub
    #key_06.color_column
      %div.color_stub
    #key_07.color_column
      %div.color_stub
    #key_08.color_column
      %div.color_stub
    #key_09.color_column
      %div.color_stub
    #key_10.color_column
      %div.color_stub
    #key_11.color_column
      %div.color_stub
    #key_12.color_column
      %div.color_stub
    #key_13.color_column
      %div.color_stub
    #key_14.color_column
      %div.color_stub
    #key_15.color_column
      %div.color_stub
    #key_16.color_column
      %div.color_stub
    #key_17.color_column
      %div.color_stub
    #key_18.color_column
      %div.color_stub
    #key_19.color_column
      %div.color_stub
    #key_20.color_column
      %div.color_stub
%div.container
  #data
    #key_01.color_column
      %div.color_stub
    #key_02.color_column
      %div.color_stub
    #key_03.color_column
      %div.color_stub
    #key_04.color_column
      %div.color_stub
    #key_05.color_column
      %div.color_stub
    #key_06.color_column
      %div.color_stub
    #key_07.color_column
      %div.color_stub
    #key_08.color_column
      %div.color_stub
    #key_09.color_column
      %div.color_stub
    #key_10.color_column
      %div.color_stub
    #key_11.color_column
      %div.color_stub
    #key_12.color_column
      %div.color_stub
    #key_13.color_column
      %div.color_stub
    #key_14.color_column
      %div.color_stub
    #key_15.color_column
      %div.color_stub
    #key_16.color_column
      %div.color_stub
    #key_17.color_column
      %div.color_stub
    #key_18.color_column
      %div.color_stub
    #key_19.color_column
      %div.color_stub
    #key_20.color_column
      %div.color_stub
#debug
#footer
  #logo
    %a{:href => "http://www.w3.org/html/logo/"}<
      %img{:alt => "HTML5 Powered with Connectivity / Realtime, and Offline & Storage",
           :height => "64", :src => "http://www.w3.org/html/logo/badge/html5-badge-h-connectivity-storage.png",
           :title => "HTML5 Powered with Connectivity / Realtime, and Offline & Storage",
           :width => "165"}
  #id= "#{session[:key]}"

:coffeescript
  $ -> # jQuery document.ready
    # semaphore to prevent doubleclick on buttons
    @acquire_semaphore = ->
      return true if !!"#{request.env["HTTP_USER_AGENT"][/(iPad)/]}"
      return false if window.semaphore
      window.semaphore = true
      setTimeout ->
        window.semaphore = false
      , 200

    @construe_data = (key, value, conflict_resolution=false) ->
      # construct data object
      old_value = localStorage[key]
      old_value ?= "#ffffff"
      data =
        id: localStorage._id
        key: key
        value: value
        crc: crc32("\#{key}|\#{value}")
        resolution: conflict_resolution
      unless window.offline? # actually send the data
        data.old_value = old_value
        @deliver_data data
      else # queue the data
        offline_data = JSON.parse localStorage._offline_data
        data.old_value = offline_data[key]
        offline_data[key] = data.value
        localStorage._offline_data = JSON.stringify offline_data
        data.old_value ?= old_value
        data.offline = true
        offline_queue = JSON.parse localStorage._offline_queue
        offline_queue.push data
        localStorage._offline_queue = JSON.stringify offline_queue
        @visualize_data_flow "offline_\#{offline_queue.length - 1}", # id
                             "#offline_queue",                       # container
                             key,                                    # column
                             value,                                  # top_color
                             data.old_value,                         # bottom_color
                             true                                    # scroll
      # debug data, "YellowGreen" if conflict_resolution

    @deliver_data = (data) ->
      # increment vector timestamp for this process and add it to data
      data.vector = @get_incremented_vector()
      # push the message in the sent queue for later reference
      @en_send_queue data
      # send and store the data
      window.web_socket.send JSON.stringify data
      @handle_data(data)

    @get_incremented_vector = ->
      vector = JSON.parse localStorage._vector
      unless vector[localStorage._id]?
        vector[localStorage._id] = 0
      else
        ++vector[localStorage._id]
      localStorage._vector = JSON.stringify vector
      vector

    @en_send_queue = (data) ->
      send_queue = JSON.parse localStorage._send_queue
      send_queue[data.vector[data.id]] = data
      localStorage._send_queue = JSON.stringify send_queue

    @random_message = ->
      # generate data for localstorage
      number = (Math.floor(Math.random() * 20) + 1).toString()
      number = "0" + number until number.length == 2
      key = "key_" + number
      value = @random_color()
      @construe_data(key, value)

    @start = () ->
      window.web_socket.send JSON.stringify
        id: localStorage._id
        disable_clear: true
      window.interval_id = window.setInterval ->
        document.random_message()
      , window.interval

    @stop = ->
      window.clearInterval window.interval_id
      delete window.interval_id

    if Modernizr.localstorage and Modernizr.websockets
      for elem in $(".button")
        do (elem) ->
          elem.onselectstart = ->
            false

      $("#startbutton").click ->
        if document.acquire_semaphore()
          unless window.interval_id?
            window.interval = 1000
            document.start()
            $(this).html("Stop")
                   .removeClass("start")
                   .addClass("stop")
            $(".clear").addClass("disabled")
                       .hide()
            $(".speed").show()
          else
            document.stop()
            $(this).html("Start")
                   .removeClass("stop")
                   .addClass("start")
            $("#speedbutton").html("Faster")
                             .hide()
            $(".clear").removeClass("disabled")
                       .show()

      $("#speedbutton").click ->
        if document.acquire_semaphore()
          if $(this).html() == "Faster"
            document.stop()
            window.interval = 500
            document.start()
            $(this).html("Aieee!!")
          else if $(this).html() == "Aieee!!"
            document.stop()
            window.interval = 50
            document.start()
            $(this).html("Slower")
          else
            document.stop()
            window.interval = 1000
            document.start()
            $(this).html("Faster")

      $("#clearbutton").click ->
        if document.acquire_semaphore()
          unless $(this).hasClass("disabled")
            window.web_socket.send JSON.stringify
              id: localStorage._id
              clear: true

      $("#offbutton").click ->
        if document.acquire_semaphore()
          interval_id = window.interval_id
          if $(this).html() == "Offline"
            document.stop() if interval_id?
            window.offline = true
            window.web_socket.close()
            document.start() if interval_id?
          else
            delete window.offline
            document.stop() if interval_id?
            document.init_socket()
            if interval_id?
              setTimeout ->
                document.start() 
              , window.nack_window

      $("#logbutton").click ->
        if document.acquire_semaphore()
          if $(this).html() == "Show Log"
            $(this).html("Hide Log")
            $("#data").css("height", "20.5em")
            $("#debug").show()
          else
            $(this).html("Show Log")
            $("#debug").hide()
            $("#data").css("height", "33.15em")

      $("#arresto").click ->
        if document.acquire_semaphore()
          window.web_socket.send JSON.stringify
            id: localStorage._id
            arresto_momentum: true

      $("#data").hover ->
        $(@).css("overflow-y", "auto")
      , ->
        $(@).css("overflow-y", "hidden")

      $("#debug").hover ->
        window.stop_scroll_debug = true
      , ->
        delete window.stop_scroll_debug


