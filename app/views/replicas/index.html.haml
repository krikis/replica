
:coffeescript
  $(document).ready ->
    debug = (string, color="black") ->
      paragraph = $("<p>\#{string}<\p>")
      paragraph.appendTo("#debug")
      paragraph.css("color", color)
      $("#debug").scrollTo(paragraph, 50)
    window.debug = debug

    # set initial reconnection timeout to 2 seconds
    window.prev_reconnect_on = 1
    window.reconnect_on = 2
    @initSocket = ->
      Socket = (if "MozWebSocket" of window then MozWebSocket else WebSocket)
      # initialize local storage system variables
      localStorage._id = "#{session[:key]}"
      localStorage._index = JSON.stringify []
      localStorage._vector ?= JSON.stringify {}
      localStorage._send_queue ?= JSON.stringify {}
      localStorage._delivery_queue ?= JSON.stringify {}
      web_socket = new Socket("ws://localhost:8080/")
      window.web_socket = web_socket

      web_socket.onopen = ->
        # reset reconnection timeouts
        window.prev_reconnect_on = 1
        window.reconnect_on = 2
        debug "connected..."
        window.web_socket.send JSON.stringify(
          id: localStorage._id
          subscribe: true
        )

      web_socket.onmessage = (evt) ->
        # fetch data from localstorage
        id = localStorage._id
        index = JSON.parse(localStorage._index)
        data = JSON.parse(evt.data)
        if data.index?                                 # set the initial index
          data.index[data.index.length] = id unless id in data.index
          index = data.index
        else if data.subscribe? and data.id != id      # handle subscription
          index[index.length] = data.id
        else if data.unsubscribe and data.id != id     # handle unsubscription
          index.delete data.id
        else if data.disable_clear
          $(".clear").addClass("disabled")
        else if data.clear
          document.clear_data()
        else if data.id != id
          document.store_data(data)
          return
        # finally
        # save index updates to localstorage
        localStorage._index = JSON.stringify(index)
        # debug evt.data, "Gainsboro"
        # debug localStorage._index, "Gainsboro"

      web_socket.onclose = ->
        localStorage._index = JSON.stringify []
        debug "socket closed"
        # debug localStorage._index, "Gainsboro"
        unless window.offline?
          debug "reconnecting in \#{window.reconnect_on} seconds...", "Gainsboro"
          setTimeout (->
            document.initSocket()
          ), window.reconnect_on * 1000
          # increase the timeout fibonacciwise in order to decrease the network load
          tmp = window.reconnect_on
          window.reconnect_on = window.reconnect_on + window.prev_reconnect_on
          window.prev_reconnect_on = tmp

    @store_data = (data) ->
      # set local variables
      {key, value, old_value} = data
      local_old_value = localStorage[key]
      local_old_value ?= "#ffffff"
      unless localStorage._id == data.id      
        vector = JSON.parse localStorage._vector
        vector[data.id] ?= 0
        debug "\#{JSON.stringify data.vector} || \#{JSON.stringify vector}"
        # The message was already delivered
        if vector[data.id] >= data.vector[data.id]
          debug "Old message", "Crimson"
          return
        # There are messages missing from processes other than the sender
        if (errors = id for id of vector when vector[id] < data.vector.id).length > 1
          debug "Missing messages from others!", "Crimson"
          return
        # There are messages missing from the sender
        if vector[data.id] + 1 < data.vector[data.id]
          debug "Missing messages from sender!", "Crimson"
          document.visualize_data_flow("#queue", key, value, old_value, false, true)
          return
        # The received data is corrupt
        if data.crc? and crc32("\#{data.key}|\#{data.value}") != data.crc
          debug "Checksum Error!", "Crimson"
          return
        # update the vector
        vector[data.id] = data.vector[data.id]
        localStorage._vector = JSON.stringify vector
        
      # Actually store the data
      localStorage[key] = value
      # Visualize the data stored
      document.visualize_data_flow("#data", key, value, old_value, old_value != local_old_value)
      # color = "Gainsboro"
      # if local_old_value != old_value
      #   color = "Crimson"
      # debug "\#{key}: \#{old_value} -> \#{value}", color
      
    @visualize_data_flow = (id, key, top_color, bottom_color, warning = false, scroll = false) ->  
      $("<div id='\#{key}' class='color_column'>").appendTo("\#{id}") if $("\#{id} > #\#{key}").length == 0
      color_box = $("<div class='color_box'>")
      unless scroll
        color_box.prependTo("\#{id} > #\#{key}")
      else
        color_box.insertAfter("\#{id} > #\#{key} > .color_stub")      
      color_box.css("border", "1px solid red") if warning
      color_box.css("background", "-webkit-gradient(linear, left top, left bottom, from(\#{top_color}), to(\#{bottom_color}))")
      $("\#{id} > #\#{key}").scrollTo(".color_box:last-child") if scroll
       

    @clear_data = ->
      for key of localStorage when key[0] != '_'
        localStorage.removeItem key
      localStorage.setItem "_send_queue", JSON.stringify({})
      localStorage.setItem "_vector", JSON.stringify({})
      $("#queue > .color_column").html("<div class='color_stub'>")
      $("#data > .color_column").html("")

    if Modernizr.localstorage and Modernizr.websockets
      document.initSocket()                              # initialize a web socket

#startbutton.button.start Start
#clearbutton.button.clear Clear
#offbutton.button.offline Offline
#logbutton.button.log Hide Log

%div.container
  #queue
    #key_01.color_column
      %div.color_stub
    #key_02.color_column
      %div.color_stub
    #key_03.color_column
      %div.color_stub
    #key_04.color_column
      %div.color_stub
    #key_05.color_column
      %div.color_stub
    #key_06.color_column
      %div.color_stub
    #key_07.color_column
      %div.color_stub
    #key_08.color_column
      %div.color_stub
    #key_09.color_column
      %div.color_stub
    #key_10.color_column
      %div.color_stub
    #key_11.color_column
      %div.color_stub
    #key_12.color_column
      %div.color_stub
    #key_13.color_column
      %div.color_stub
    #key_14.color_column
      %div.color_stub
    #key_15.color_column
      %div.color_stub
    #key_16.color_column
      %div.color_stub
    #key_17.color_column
      %div.color_stub
    #key_18.color_column
      %div.color_stub
    #key_19.color_column
      %div.color_stub
    #key_20.color_column
      %div.color_stub
%div.container
  #data
    #key_01.color_column
    #key_02.color_column
    #key_03.color_column
    #key_04.color_column
    #key_05.color_column
    #key_06.color_column
    #key_07.color_column
    #key_08.color_column
    #key_09.color_column
    #key_10.color_column
    #key_11.color_column
    #key_12.color_column
    #key_13.color_column
    #key_14.color_column
    #key_15.color_column
    #key_16.color_column
    #key_17.color_column
    #key_18.color_column
    #key_19.color_column
    #key_20.color_column
#debug
#id= "#{session[:key]}"

:coffeescript
  $(document).ready ->
    # fetch data from localstorage
    id = localStorage._id
    index = JSON.parse localStorage._index
    @send_data = ->
      # increment vector timestamp for this process
      vector = JSON.parse(localStorage._vector)
      vector[localStorage._id] ?= 0
      count = ++vector[localStorage._id]
      localStorage._vector = JSON.stringify vector
      # generate data for localstorage
      number = (Math.floor(Math.random() * 20) + 1).toString()
      number = "0" + number until number.length == 2
      key = "key_" + number
      value = window.random_color()
      old_value = localStorage[key]
      old_value ?= "#ffffff"
      data =
        id: id
        key: key
        value: value
        old_value: old_value
        crc: crc32("\#{key}|\#{value}")
        vector: vector
      # push the message in the sent queue for later reference
      send_queue = JSON.parse localStorage._send_queue
      send_queue[count.toString()] = data
      localStorage._send_queue = JSON.stringify send_queue
      # send and store the data
      window.web_socket.send JSON.stringify(data)
      document.store_data(data)

    if Modernizr.localstorage and Modernizr.websockets
      $("#startbutton").click ->
        unless window.interval_id?
          window.web_socket.send JSON.stringify(id: id, disable_clear: true)
          window.interval_id = window.setInterval document.send_data, 1000
          $(this).html("Stop")
                 .removeClass("start")
                 .addClass("stop")
          $(".clear").addClass("disabled")
        else
          window.clearInterval window.interval_id
          window.interval_id = null
          $(this).html("Start")
                 .removeClass("stop")
                 .addClass("start")
          $(".clear").removeClass("disabled")

      $("#clearbutton").click ->
        unless $(this).hasClass("disabled")
          window.web_socket.send JSON.stringify(
            id: id
            clear: true
          )

      $("#offbutton").click ->
        if $(this).html() == "Offline"
          $(this).html("Online")
                 .removeClass("offline")
                 .addClass("online")
          window.offline = true
          window.web_socket.close()
        else
          $(this).html("Offline")
                 .removeClass("online")
                 .addClass("offline")
          window.offline = null
          document.initSocket()

      $("#logbutton").click ->
        if $(this).html() == "Show Log"
          $(this).html("Hide Log")
          $("#debug").show()
        else
          $(this).html("Show Log")
          $("#debug").hide()
