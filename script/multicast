#!/usr/bin/env ruby
require 'em-websocket'
require 'json'
require 'andand'

EventMachine.run {

  @channel = EM::Channel.new

  @index = {}

  EventMachine::WebSocket.start(:host => "0.0.0.0", :port => 8080, :secure => false) do |ws|

    # a client connects to the web socket server
    ws.onopen {
      # subscribe the client to the multicast channel (save the subscription for later)
      sid = @channel.subscribe do |msg|
        # check destination filter if point-to-point message
        unless msg["dest"] and msg["dest"] != @index[ws.signature]
          puts msg.inspect
          # send multicast or point-to-point message to client
          ws.send JSON.dump(msg)
        end
      end
      puts "+#{sid}" # log subscription id
      # send overview of the peer-to-peer network (for debuggin only)
      ws.send JSON.dump({:index => @index.values})

      # a client disconnects from the web-socket server
      ws.onclose {
        # unsubscribe it from the channel using the saved id
        @channel.unsubscribe sid
        puts "-#{sid}" # log subscription id
        # multicast unsubscription so that clients can adapt their view of the network (for debuggin only)
        @channel.push({"id" => @index.delete(ws.signature),
                       "unsubscribe" => true})
      }
    }

    # a message was sent to the web socket server
    ws.onmessage {|msg|
      # parse the message to a JSON object
      object = (JSON.parse msg rescue nil)
      if object and object["id"]
        # save the client's unique id for point-to-point communication
        unless signature = @index.keys.select{|sign| @index[sign] == object["id"]}.first and
               signature == ws.signature
          @index[ws.signature] = object["id"]
          @index.delete signature if signature
        end
        # multicast the message to all clients in the network
        @channel.push object
      end
    }

  end

  puts "Server started"
}